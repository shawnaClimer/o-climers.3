to make the executables, type make oss user

this program simulates an os by forking 5 (default) user processes. It sets and updates a "system clock". the user processes generate a random duration, then attempt to gain access to their critical region where they check to see if their time is up. the critical region is protected by a message of type 1 in the message queue. oss puts it there, then the first user process to retrieve it gets to enter the critical region. the process checks the time and then sends a message of type 1 back to the queue so that another process can use it. if a process discovers their time is up, they send a message of type 2 to the queue that has the seconds and nanoseconds of the discovery. then they return the message of type 1 and terminate. upon receiving the message of type 2, oss writes to the log what time it received the message and what time was contained in the message. then it checks for the process to terminate, then replaces it in the pids[] with a new forked process. this continues until 100 processes have spawned, "system time" reads 2 seconds, or 20 second (default) time has elapsed in oss. shared memory including the message queue are then all deleted. signal catching is implemented.